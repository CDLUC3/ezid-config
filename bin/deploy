#! /usr/bin/env python

# Interactive, semi-automated deployment tool for EZID.  May be run
# from anywhere to deploy changes to, and restart/reload, all EZID
# instances in sequence.  In addition, this tool can be used to
# distribute the ezid.conf.shadow configuration file.
#
# To run this tool, the user must be able to: log in to the various
# EZID host machines with or without a password; 'sudo su' to the ezid
# role account without a password; and access the central Mercurial
# repositories using a password.
#
# Usage:
#
#    deploy [-a answerbank] [-l logfile]
#
# This script operates by ssh-ing to the EZID host machines and
# issuing commands as though a human were typing them.  As such, it is
# fragile.  Use the -l option to record debugging output in case
# anything goes wrong.  Caution: the output will contain any typed
# passwords.
#
# The -a option can be used to specify a file containing answers; any
# answers not in the file will be asked for interactively as normal.
# The file should be a Python configuration file in which the DEFAULT
# section gives answers to instance-independent questions and default
# answers that apply to all instances, and in which named sections
# give answers for specific instances.  Questions are identified by
# number.
#
# Instance-independent questions:
#
#     0 Problem encountered.  Action?
#     1 Which repository?
#     2 Login username?
#     3 Login password?
#     4 <repository> username?
#     5 <repository> password?
#     6 Deploy new shadow config file?
#     7 Directory containing shadow config file?
#     8 Deploy to <instance>?
#
# Instance-specific questions:
#
#     9 Repository is not clean.  Action?
#    10 Update to which branch or changeset?
#    11 Enter any branch, tag, or changeset identifier.
#    12 Reload EZID, reload mod_wsgi, or restart?
#    13 Most recent server activity shown.  Action?
#
# The sample file below reloads all instances, deploying the
# production branch to all instances except for the development
# instance, which receives the default branch.
#
#    [DEFAULT]
#    1: ezid
#    2: gjanee
#    3:
#    4: gjanee
#    6: no
#    8: yes
#    10: production
#    12: reload EZID
#
#    [development]
#    10: default
#
# Caution: it is possible for pre-loaded answers to cause an infinite
# loop.
#
# This script requires pexpect <http://www.noah.org/wiki/pexpect>.  In
# addition, it requires a custom version of pexpect's pxssh module
# (named "mypxssh").
#
# Known problem: pxssh seems to leave zombie ssh processes scattered
# around, even though we explicitly logout and close sessions.
#
# Greg Janee <gjanee@ucop.edu>
# May 2012; updated August 2014

import ConfigParser
import getpass
import optparse
import os
import os.path
import re
import StringIO
import sys
import time

import mypxssh

ROLE_ACCOUNT = "ezid"
ROLE_ACCOUNT_COMMAND = "/usr/bin/sudo su - " + ROLE_ACCOUNT
ROLE_ACCOUNT_PROMPT = r"%"
APACHE_ROOT = "/ezid/apache"
APACHE_ACCESS_LOG = APACHE_ROOT + "/logs/access_log"
APACHE_RESTART_COMMAND = "/ezid/init.d/apache restart"
EZID_ROOT = "/ezid/apache/ezid/SITE/PROJECT"
HG_SERVER = "hg.cdlib.org"

REPOSITORIES = [
  # (selection code, name on HG_SERVER, local directory)
  ("c", "ezid-config", APACHE_ROOT),
  ("e", "ezid", EZID_ROOT),
  ("i", "ezid-info-pages", EZID_ROOT + "/templates/info")]

INSTANCES = [
  # (abbreviation, name, hostname, EZID client code)
  ("dev", "development", "ias-ezid-dev.cdlib.org", "d"),
  ("stg", "staging", "ias-ezid-stg.cdlib.org", "s"),
  ("wfl", "workflow", "ias-ezid-wf-stg.cdlib.org", "w"),
  ("prd", "production", "ias-ezid-prd.cdlib.org", "p")]

_answerBank = None
_logfile = None
_repository = None
_sshUsername = None
_sshPassword = None
_hgUsername = None
_hgPassword = None
_shadowConfigFile = None
_instance = None
_ssh = None
_adminPassword = None

if "USER" in os.environ:
  _loginUsername = os.environ["USER"]
else:
  _loginUsername = os.environ["LOGNAME"]

def exit ():
  global _ssh
  if _ssh:
    try:
      _ssh.logout()
      _ssh.close()
    except:
      pass
    _ssh = None
  sys.exit()

def prPrefix ():
  if _instance != None:
    return "DEPLOY:%s|" % _instance[0]
  else:
    return "DEPLOY|"

def pr (s=""):
  if len(s) > 0:
    print prPrefix() + " " + s
  else:
    print prPrefix()

class Abandon (Exception):
  pass

def abandon ():
  pr("Deployment on %s abandoned." % _instance[2])
  raise Abandon()

def bankedAnswer (qNum):
  if _answerBank == None: return None
  q = str(qNum)
  if _instance != None:
    if _answerBank.has_option(_instance[1], q):
      return _answerBank.get(_instance[1], q)
  if _answerBank.has_option("DEFAULT", q):
    return _answerBank.get("DEFAULT", q)
  return None

def ask (qNum, question, extraLines=[], hideAnswer=False, allowNoAnswer=False):
  bankedAnswerAttempt = False
  while True:
    try:
      pr()
      pr(question)
      for l in extraLines: pr("   " + l)
      if bankedAnswer(qNum) != None:
        assert not bankedAnswerAttempt, "answer bank results in infinite loop"
        bankedAnswerAttempt = True
        answer = bankedAnswer(qNum).strip()
        if hideAnswer:
          pr("-->")
        else:
          pr("--> " + answer)
      else:
        if hideAnswer:
          answer = getpass.getpass(prPrefix() + " --> ").strip()
        else:
          answer = raw_input(prPrefix() + " --> ").strip()
    except EOFError:
      exit()
    if len(answer) > 0 or allowNoAnswer: return answer
    pr("No answer given.")

def first (t):
  return t[0]

def second (t):
  return t[1]

def identity (t):
  return t

def askEnum (qNum, question, answers, selectionCodeFunc=first,
  fullAnswerFunc=second, returnFunc=identity, extraLines=[]):
  bankedAnswerAttempt = False
  while True:
    try:
      pr()
      pr(question)
      for l in extraLines: pr("   " + l)
      pr(", ".join("[%s] %s" %\
        (selectionCodeFunc(a), fullAnswerFunc(a)) for a in answers))
      if bankedAnswer(qNum) != None:
        assert not bankedAnswerAttempt, "answer bank results in infinite loop"
        bankedAnswerAttempt = True
        answer = bankedAnswer(qNum).strip()
        pr("--> " + answer)
      else:
        answer = raw_input(prPrefix() + " --> ").strip()
    except EOFError:
      exit()
    if len(answer) > 0:
      if answer in map(selectionCodeFunc, answers):
        return returnFunc(
          [a for a in answers if selectionCodeFunc(a) == answer][0])
      elif answer in map(fullAnswerFunc, answers):
        return returnFunc(
          [a for a in answers if fullAnswerFunc(a) == answer][0])
      else:
        al = filter(lambda a: fullAnswerFunc(a).startswith(answer), answers)
        if len(al) == 0:
          pr("Unrecognized answer.")
        elif len(al) > 1:
          pr("Ambiguous answer.")
        else:
          return returnFunc(al[0])
    else:
      pr("No answer given.")

def askYesNo (qNum, question, extraLines=[]):
  return askEnum(qNum, question, [("y", "yes"), ("n", "no")],
    returnFunc=second, extraLines=extraLines) == "yes"

def execute1 (command, expectCommandEcho=True, printableCommand=None):
  if printableCommand == None: printableCommand = command
  _ssh.sendline(command)
  _ssh.prompt()
  # When a long command is issued, the echo of the command contains
  # " \r" sequences at each place where the command wrapped in the
  # terminal window.  It's not clear if this is specific to Solaris,
  # or caused by the TERM setting, or...?  In any case, we don't
  # expect these sequences in any output we care about, so we just
  # remove them globally.
  o = _ssh.before.replace(" \r", "")
  if expectCommandEcho:
    assert o.startswith(command + "\r\n"),\
      "unexpected return from command '%s'" % printableCommand
    o = o[len(command)+2:]
  else:
    assert o.startswith("\r\n"),\
      "unexpected return from command '%s'" % printableCommand
    o = o[2:]
  return o.replace("\r\n", "\n")

def execute (command, expectCommandEcho=True, checkStatus=True,
  printableCommand=None):
  if printableCommand == None: printableCommand = command
  o = execute1(command, expectCommandEcho, printableCommand)
  if checkStatus:
    s = execute1("echo $?")
    assert s == "0\n",\
      "command '%s' returned nonzero exit status\n%s" % (printableCommand, o)
  return o

def attempt (func, description):
  while True:
    try:
      func()
    except Abandon:
      raise
    except Exception, e:
      print "\n%s: %s\n" % (type(e).__name__, str(e).strip())
      action = askEnum(0, "Problem encountered %s.  Action?" % description,
        [("i", "ignore"), ("r", "retry"), ("a", "abandon")], returnFunc=first)
      if action == "i":
        return
      elif action == "r":
        pass
      elif action == "a":
        abandon()
      else:
        assert False
    else:
      return

def readShadowConfigFile ():
  global _shadowConfigFile
  while True:
    d = ask(7, "Directory containing shadow config file?",
      extraLines=["(cwd=%s)" % os.getcwd()])
    try:
      f = open(os.path.join(d, "ezid.conf.shadow"))
      _shadowConfigFile = f.read()
      f.close()
    except Exception, e:
      pr("%s: %s" % (type(e).__name__, str(e).strip()))
    else:
      break
  if not _shadowConfigFile.endswith("\n"):
    pr("Shadow config file must end with newline; aborting.")
    exit()
  pr("OK")

def checkRepositoryStatus ():
  while True:
    pr("Checking repository status...")
    o = execute("hg status")
    if o == "":
      pr("OK")
      return
    print
    print "> hg status"
    print o
    action = askEnum(9, "Repository is not clean.  Action?",
      [("c", "clean [discard uncommitted changes]"), ("i", "ignore"),
      ("a", "abandon")], returnFunc=first)
    if action == "c":
      pr("Cleaning repository...")
      o = execute("hg update -C -r .")
      assert len(o.splitlines()) == 1 and re.match("\d+ files updated", o),\
        "hg update failed:\n" + o
      pr("OK")
    elif action == "i":
      return
    elif action == "a":
      abandon()
    else:
      assert False

def pullChangesets ():
  pr("Pulling changesets...")
  command = "hg pull https://%s@%s/%s" % (_hgUsername, HG_SERVER,
    _repository[1])
  _ssh.sendline(command)
  _ssh.expect("password: ")
  o = execute(_hgPassword, False, False, command)
  ol = o.splitlines()
  assert len(ol) >= 3 and ol[0].startswith("pulling from") and\
    ol[1].startswith("searching for") and\
    (re.search("^no changes found", o, re.M) or\
    re.search("^added \d+ changesets", o, re.M)), "hg pull failed:\n" + o
  pr("OK")

def verifyRepository ():
  pr("Verifying repository...")
  o = execute("hg verify")
  assert o.startswith("checking") and "warning" not in o and\
    "error" not in o, "hg verify failed:\n" + o
  pr("OK")

def updateRepository ():
  pr("Updating repository...")
  o = execute("hg identify -inbt")
  print
  print "> hg identify"
  print o
  o = execute("hg branches")
  print "> hg branches"
  print o
  o = execute("hg heads")
  print "> hg heads"
  print o,
  branch = askEnum(10, "Update to which branch or changeset?",
    [("p", "production"), ("d", "default"), ("o", "other"), ("a", "abandon")],
    returnFunc=second,
    extraLines=["Guideline: all instances but 'development' should",
    "generally run the production branch.  The branch run",
    "by the 'development' instance is variable."])
  if branch == "abandon":
    abandon()
  elif branch == "other":
    branch = ask(11, "Enter any branch, tag, or changeset identifier:")
  pr("Updating to %s..." % branch)
  o = execute("hg update -r " + branch)
  assert re.match("\d+ files updated", o), "hg update failed:\n" + o
  pr("OK")

def uploadShadowConfigFile ():
  pr("Uploading new shadow config file...")
  execute("cd " + EZID_ROOT)
  _ssh.sendline("cat > settings/ezid.conf.shadow")
  _ssh.send(_shadowConfigFile)
  # sendeof doesn't work on Solaris for some reason, so we send ^D.
  _ssh.sendcontrol('d')
  _ssh.prompt()
  pr("OK")
  pr("Verifying the upload...")
  o = execute("cat settings/ezid.conf.shadow")
  assert o == _shadowConfigFile, "ezid.conf.shadow mismatch"
  pr("OK")

def getAdminPassword ():
  global _adminPassword
  pr("Locating EZID admin password...")
  execute("cd " + EZID_ROOT)
  o = execute("cat settings/ezid.conf.shadow")
  cp = ConfigParser.ConfigParser()
  cp.readfp(StringIO.StringIO(o))
  if cp.has_option("ldap", "{%s}admin_password" % _instance[1]):
    _adminPassword = cp.get("ldap", "{%s}admin_password" % _instance[1])
  else:
    _adminPassword = cp.get("ldap", "admin_password")
  pr("OK")

def reloadEzid ():
  pr("Reloading EZID...")
  execute("cd " + EZID_ROOT)
  c = "tools/client %s admin:%s reload" % (_instance[3], _adminPassword)
  pc = "tools/client %s admin:**** reload" % _instance[3]
  o = execute(c, printableCommand=pc)
  assert o.startswith("success"), "client reload failed:\n" + o
  pr("OK")

def reloadModwsgi ():
  pr("Triggering a mod_wsgi reload (EZID daemon restart)...")
  execute("touch " + os.path.join(EZID_ROOT, "apache", "django.wsgi"))
  pr("OK")
  pr("Waiting a few seconds...")
  time.sleep(3)

def restartApache ():
  while True:
    o = execute("tail " + APACHE_ACCESS_LOG)
    print
    print "> tail " + APACHE_ACCESS_LOG
    print o
    action = askEnum(13, "Most recent server activity shown above.  Action?",
      [("r", "restart"), ("t", "tail the log again"), ("a", "abandon")],
      returnFunc=first)
    if action == "r":
      pr("Restarting Apache...")
      execute(APACHE_RESTART_COMMAND)
      pr("OK")
      pr("Waiting a few seconds...")
      time.sleep(3)
      return
    elif action == "t":
      pass
    elif action == "a":
      abandon()
    else:
      assert False

def reloadOrRestart ():
  action = askEnum(12, "Reload EZID, reload mod_wsgi, or restart?",
    [("l", "reload EZID"),
    ("m", "reload mod_wsgi"), ("s", "restart"), ("a", "abandon")],
    returnFunc=first,
    extraLines=["Guideline: If only configuration files and templates have",
    "changed, a 'reload EZID' is sufficient; no current",
    "operations or incoming requests will be affected.  If code",
    "has changed, a 'reload mod_wsgi' must be performed, which",
    "restarts the EZID daemon process; it attempts to wait until",
    "all current operations have finished and holds on to",
    "incoming requests, but may time out.  A 'restart' restarts",
    "Apache entirely.  If 'restart' is selected, an opportunity",
    "will be given to view system activity first."])
  if action == "l":
    reloadEzid()
  elif action == "m":
    reloadModwsgi()
  elif action == "s":
    restartApache()
  elif action == "a":
    abandon()
  else:
    assert False

def testServer ():
  execute("cd " + EZID_ROOT)
  pr("Test: minting an ARK...")
  prefix = "ark:/99999/fk4"
  c = "tools/client %s admin:%%s mint %s" % (_instance[3], prefix)
  o = execute(c % _adminPassword, printableCommand=(c % "****"))
  assert o.startswith("success"), "client mint %s failed:\n%s" % (prefix, o)
  pr("OK")
  pr("Test: minting a DOI...")
  prefix = "doi:10.5072/FK2"
  c = ("tools/client %s admin:%%s mint %s datacite.title test " +\
    "datacite.creator test datacite.publisher test " +\
    "datacite.publicationyear test") % (_instance[3], prefix)
  o = execute(c % _adminPassword, printableCommand=(c % "****"))
  assert o.startswith("success"), "client mint %s failed:\n%s" % (prefix, o)
  pr("OK")

def deploy ():
  global _ssh
  try:
    _ssh = mypxssh.pxssh()
    _ssh.logfile = _logfile
    pr("Logging in to %s... (may take awhile)" % _instance[2])
    _ssh.login(_instance[2] + " " + ROLE_ACCOUNT_COMMAND, _sshUsername,
      _sshPassword, original_prompt=ROLE_ACCOUNT_PROMPT)
    pr("OK")
    execute("cd " + _repository[2])
    attempt(checkRepositoryStatus, "checking repository status")
    attempt(pullChangesets, "pulling changesets")
    attempt(verifyRepository, "verifying repository")
    attempt(updateRepository, "updating repository")
    if _shadowConfigFile:
      attempt(uploadShadowConfigFile, "uploading new shadow config file")
    attempt(getAdminPassword, "locating EZID admin password")
    attempt(reloadOrRestart, "reloading or restarting EZID")
    attempt(testServer, "testing the server")
  except Abandon:
    pass
  except Exception, e:
    print "\n%s: %s\n" % (type(e).__name__, str(e).strip())
    pr("Deployment on %s abandoned due to exception." % _instance[2])
  finally:
    if _ssh:
      try:
        _ssh.logout()
        _ssh.close()
      except:
        pass
      _ssh = None

# Command line arguments.

p = optparse.OptionParser(usage="%prog [options]")
p.add_option("-a", action="store", type="string", dest="answerBank",
  default=None, metavar="FILE", help="answer file")
p.add_option("-l", action="store", type="string", dest="logfile",
  default=None, metavar="FILE", help="log file")
options, args = p.parse_args()
if len(args) != 0: p.error("wrong number of arguments")

if options.answerBank:
  _answerBank = ConfigParser.SafeConfigParser()
  f = open(options.answerBank)
  _answerBank.readfp(f)
  f.close()

if options.logfile:
  _logfile = open(options.logfile, "w")

# Initial questions.

_repository = askEnum(1, "Which repository?", REPOSITORIES)
if _loginUsername == ROLE_ACCOUNT:
  _sshUsername = ask(2, "Login username?")
  _sshPassword = ask(3, "Login password? (will not be echoed)",
    hideAnswer=True)
else:
  _sshUsername = ask(2, "Login username? (defaults to %s)" % _loginUsername,
    allowNoAnswer=True)
  if _sshUsername == "": _sshUsername = _loginUsername
  _sshPassword = ask(3,
    "Login password? (only if required; will not be echoed)",
    hideAnswer=True, allowNoAnswer=True)
_hgUsername = ask(4, "%s username? (defaults to %s)" % (HG_SERVER,
  _sshUsername), allowNoAnswer=True)
if _hgUsername == "": _hgUsername = _sshUsername
_hgPassword = ask(5, "%s password? (will not be echoed)" % HG_SERVER,
  hideAnswer=True)
if _repository[1] == "ezid" and\
  askYesNo(6, "Deploy new shadow config (ezid.conf.shadow) file?"):
  readShadowConfigFile()

# Main processing.

for instance in INSTANCES:
  _instance = None
  if askYesNo(8, "Deploy to %s (%s)?" % (instance[1], instance[2])):
    _instance = instance
    deploy()
