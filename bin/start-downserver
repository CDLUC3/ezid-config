#! /bin/bash

# Starts the "EZID is down" replacement server.
# N.B.: This actually starts two processes.
# Usage: start-downserver downtime [message]
# 'downtime' is the anticipated down time in seconds.

WART_DIR=/ezid/apache/WARTS
HTTPD_CONF=$WART_DIR/httpd.conf
DOWNSERVER=/ezid/apache/ezid/SITE/PROJECT/tools/downserver
HTTP_LOG=/tmp/downserver.http.log
HTTPS_LOG=/tmp/downserver.https.log

if [ $# -lt 1 -o $# -gt 2 ]; then
  echo "Usage: start-downserver downtime [message]" 1>&2
  exit 1
fi

# HTTP server
echo "Starting HTTP server in the background..."
port=`grep Listen $HTTPD_CONF | head -1 | awk '{ print $2 }'`
hostname=`grep ServerName $HTTPD_CONF | awk '{ print $2 }'`
hostname=${hostname%:*}
$DOWNSERVER $hostname $port "$@" </dev/null >$HTTP_LOG 2>&1 &
sleep 1
if [ ! -s $HTTP_LOG ]; then
  echo "Success; logging to $HTTP_LOG"
else
  echo "Failed; log follows"
  cat $HTTP_LOG
fi

# HTTPS server
echo "Starting HTTPS server in the background..."
port=`grep Listen $HTTPD_CONF | tail -1 | awk '{ print $2 }'`
$DOWNSERVER -ssl $WART_DIR/$hostname.key $WART_DIR/$hostname.crt $hostname \
  $port "$@" </dev/null >$HTTPS_LOG 2>&1 &
sleep 1
if [ ! -s $HTTPS_LOG ]; then
  echo "Success; logging to $HTTPS_LOG"
else
  echo "Failed; log follows"
  cat $HTTPS_LOG
fi
